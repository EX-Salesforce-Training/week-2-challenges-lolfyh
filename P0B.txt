public class P0B {
    public static Integer nFibonacci(Integer n){
        list<integer> num = new list<integer>{1,1};
        if (n < 1){
            return 0;
        }
            for(integer i=0; i<n-2; i++ ){
                system.debug(num);
                num.add(num[num.size()-1]+num[num.size()-2]);
            }
    return num[num.size()-1];
    }
    public static Integer[] sortArray( Integer[] intList ) {
        list<integer> newlist = new list<integer>();
        while (intList.size()!=0){
            integer n = intlist[0];
        	integer index = 0;
            for(integer i = 0; i<= intlist.size()-1;i++){
                if(intlist[i] <=n){
                    n =intlist[i];
                    index = i;
                }
            }newlist.add(intlist[index]);
            intlist.remove(index);
        }return newlist;
}



	public static Integer nFactorial( Integer n) {
        integer sum= 1;
        for(integer i = 1; i <=n; i++){
            sum *= i;
        }
        return sum;
        
}
    public static Integer[] rotateLeftNTimes( Integer[] lis, Integer n) {
        integer g = math.mod(n,lis.size());
        
        for(integer i = 1; i <= g; i++){
            lis.add(lis.get(0));
            lis.remove(0);
        }
        return lis;
	        
        
}
    
	public static Boolean bracketsAreBalanced( String s ) {
        map<string,string> brack = new map<string,string>{']'=>'[','}'=>'{',')'=>'('}; 
        
        list<string> check = new list<string>();
        for(integer i =0;i< s.Length();i++){
            if(brack.containskey(s.substring(i,i+1))){
                if((brack.get(s.substring(i,i+1))) == check[check.size()-1]){
                    check.remove(check.size()-1);
                }
            }
            else if(brack.containskey(s.substring(i,i+1)) == false && s.substring(i,i+1)!= ' '){
                check.add(s.substring(i,i+1));
            }
        }
        return check.size()== 0;
        
}
    
public static void updateAccountSize( ) {
	list<account> acc = [select NumberOfEmployees,Size__c from account];
    for(integer i = 0; i < acc.size();i++){
        if ( acc[i].NumberOfEmployees >0 && acc[i].NumberOfEmployees <= 1000){
            acc[i].size__c= 'small';
            update acc[i];
        if (acc[i].NumberOfEmployees >1000 && acc[i].NumberOfEmployees<=10000)
            acc[i].size__c ='medium';
            update acc[i];
        if (acc[i].NumberOfEmployees >10000){
            acc[i].size__c ='large';
            update acc[i];
            }
        }
      
        
    }
    
    
}
   public static void updateCALeads( ) {
       
       list<lead> lead1 = [select address,Status,Description from lead where state = 'ca'];

       for(integer i = 0; i < lead1.size();i++){
               lead1[i].Status = 'Close-Not Converted';
               lead1[i].Description ='We are no longer doing business in California';
               update lead1[i];
           }
       }
    public static void closePastDueOpportunities( ) {
        list<Opportunity> opp1 = [SELECT CloseDate,StageName from Opportunity where (Closedate < today) AND StageName !='Closed Won'];
        for(integer i=0;i < opp1.size();i++){
            opp1[i].StageName = 'Closed Lost';
            update opp1[i];
        }
        
}

	}